@use "props" as *;

/// Size an element
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

/// Add left/right padding to an element
@mixin padding(
	$top: ref("style.root.paddingTop"),
	$right: ref("style.root.paddingRight"),
	$bottom: ref("style.root.paddingBottom"),
	$left: ref("style.root.paddingLeft")
) {
	padding: $top $right $bottom $left;
}

/// Add top/bottom padding to an element
@mixin margin-y($top, $bottom: $top) {
	padding-top: $top;
	padding-bottom: $bottom;
}

/// Add left/right margin to an element
@mixin margin-x($left, $right: $left) {
	margin-left: $left;
	margin-right: $right;
}

/// Add top/bottom margin to an element
@mixin margin-y($top, $bottom: $top) {
	margin-top: $top;
	margin-bottom: $bottom;
}

/// Set font size, line height, and letter spacing
@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
	font-size: $font-size;
	line-height: $line-height;
	letter-spacing: $letter-spacing;
}

/// Simple fade-in animation
@mixin fade($type: "hide") {
	@if $type == "hide" {
		visibility: hidden;
		opacity: 0;
		transition: visibility 1s, opacity 1s;
	} @else if $type == "show" {
		visibility: visible;
		opacity: 1;
		transition: visibility 1s, opacity 1s;
	}
}


/// Flow mixin
@mixin flow($gap: ref("style.blockGap")) {
	& > * + * {
		margin-top: $gap;
	}
}

/// Container mixins
@mixin container($type: "default") {
	@if $type == "default" {
		max-width: ref("custom.contentSizes.default");
		@include margin-x(auto);
	} @else if $type == "wide" {
		max-width: ref("custom.contentSizes.wide");
		@include margin-x(auto);
	} @else if $type == "full" {
		max-width: ref("custom.contentSizes.full");
		@include margin-x(auto);
	}
}


/// Blocks alignment mixin
@mixin blocks-alignment() {
	padding-right: ref("style.root.paddingRight");
	padding-left: ref("style.root.paddingLeft");
	& > *, .is-layout-flow > * {
		@include margin-x(auto);
		max-width: ref("custom.contentSizes.default");
		&:where(.alignfull) {
			margin-right: calc( var(--wp--style--root--padding-right) * -1 );
			margin-left: calc( var(--wp--style--root--padding-left) * -1 );
			max-width: calc( 100% + var(--wp--style--root--padding-right) + var(--wp--style--root--padding-left) );
		}
		&:where(.alignwide) {
			max-width: ref("custom.contentSizes.wide");
		}
		&:where(.alignleft) {
			margin-left: 0;
			float: left;
			margin-right: ref("style.blockGap");
		}
		&:where(.alignright) {
			margin-right: 0;
			float: right;
			margin-left: ref("style.blockGap");
		}
	}
	.is-layout-flow > * {
		padding-right: ref("style.root.paddingRight");
		padding-left: ref("style.root.paddingLeft");
	}
}
